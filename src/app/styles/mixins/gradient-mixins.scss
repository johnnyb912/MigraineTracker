/// Mixin for creating linear gradient
///
/// @param {Number|String} $direction - direction the gradient should flow, can be in degrees (90deg) or a string ('to right'), defaults to 90deg
/// @param {List} $colors - List of colors and positions
///
/// @example scss - Usage
///     .Default {
///         @include linear-gradient(to right, $brand-primary, $brand-secondary);
///     }
///
///     .Element {
///         @include linear-gradient(to top, $brand-primary 0%, $brand-secondary 100%);
///     }
///     .Multi {
///         @include linear-gradient(50deg, $brand-primary 0%, $brand-primary-light 50%, $brand-secondary-light 51%, $brand-secondary 100%);
///     }
///
/// @example css - CSS output
///     .Default {
///         background: linear-gradient(to right, #2e65b0, #318ecd);
///     }
///     .Element {
///         background: linear-gradient(to top, #2e65b0 0%, #318ecd 100%);
///     }
///     .Multi {
///         background: linear-gradient(50deg, #2e65b0 0%, #0391e2 50%, #2f8dcc 51%, #318ecd 100%);
///     }
@mixin linear-gradient($direction, $colors...) {
    $n: length($colors);
    $i: 1;

    $gradient-list: ();
    $fallback: null;

    $first: (nth($colors, 1));

    @if (type-of($first) == color) or ($first == 'transparent') {
        $fallback: $first;
    }

    @else {
        $fallback: str-slice(quote($first), 1, -4);
        $fallback: unquote($fallback);
    }

    @while $i <= $n {
        $value: (nth($colors, $i));

        $gradient-list: append($gradient-list, $value, comma);

        $i: $i + 1;
    }

    @if (type-of($direction) == string) {
        $direction: unquote($direction);
    }

    background-color: $fallback;
    background-image: linear-gradient($direction, $gradient-list);
}

/// Mixin for creating simple 2-color linear gradient
///
/// @param {Color} $color-start - Starting color for the gradient
/// @param {Color} $color-stop - Ending color for the gradient
/// @param {Number|String} $direction [90deg] - direction the gradient should flow, can be in degrees (90deg) or a string ('to right'), defaults to 90deg
///
/// @example scss - Usage
///     .Default {
///         @include simple-gradient($brand-primary, $brand-secondary);
///     }
///
///     .Element {
///         @include simple-gradient($brand-primary, $brand-secondary, to left);
///     }
///
/// @example css - CSS output
///     .Default {
///         background: linear-gradient(90deg, #2e65b0 0%, #318ecd 100%);
///     }
///     .Element {
///         background: linear-gradient(to left, #2e65b0 0%, #318ecd 100%);
///     }
@mixin simple-gradient($color-start, $color-stop, $direction: 90deg) {
    @if (type-of($direction) == string) {
        $direction: unquote($direction);
    }

    background-color: $color-start;
    background-image: linear-gradient($direction, $color-start 0%, $color-stop 100%);
}

/// Mixin for creating radial gradient
///
/// @param {Color} $color-start - Starting color for the gradient from center, defaults to $gray-lighter
/// @param {Color} $color-stop - Ending color for the gradient to corners, defaults to $gray-light
///
/// @example scss - Usage
///     .Default {
///         @include linear-gradient($brand-primary, $brand-secondary);
///     }
///
/// @example css - CSS output
///     .Default {
///         background-image: -webkit-radial-gradient(circle, #2e65b0, #318ecd);
///         background-image: radial-gradient(circle, #2e65b0, #318ecd);
///         background-repeat: no-repeat;
///     }
@mixin radial-gradient($color-start: $gray-lighter, $color-stop: $gray-light) {
    background-image: radial-gradient(circle, $color-start, $color-stop);
    background-repeat: no-repeat;
}

/// Mixin to create linear gradient for border-radius element
///
/// @param {Number} $width - Width for border-radius item, defaults to '6rem'
/// @param {Number} $height - Height for border-radius item, defaults to '6rem'
/// @param {Number} $border-width - Width of border with gradient, defaults to '6rem'
/// @param {Number} $border-radius - Value for border-radius, defaults to '50%'
/// @param {String} $label-tag [.Label] - html tag which will include inside text, defaults to '.Label'
///
/// @example scss - Usage
///     .Element {
///         @include rounded-border-gradient($width: 6rem, $height: 6rem, $border-width: .6rem, $label-tag: '.Label');
///     }
///
/// @example css - CSS output
///     .Element {
///         position: relative;
///
///          #{$label-tag} {
///             position: relative;
///             z-index: 1;
///
///             width: 6rem;
///             height: 6rem;
///
///             background: #ffffff;
///             border-radius: 50%;
///             font-family: "museo_sans700";
///             padding-top: 1.3rem;
///             text-align: center;
///             text-transform: uppercase;
///             font-size: 26px;
///             font-size: 2.6rem;
///          }
///
///          &::after {
///             position: absolute;
///             top: -0.3rem;
///             left: -0.3rem;
///             content: '';
///
///             width: 6.6rem;
///             height: 6.6rem;
///
///             border-radius: 50%;
///
///             background: #35928f;
///             background: -webkit-linear-gradient(left, #35928f 0%, #3eb79c 100%);
///             background: linear-gradient(to right, #35928f 0%, #3eb79c 100%);
///          }
///     }
@mixin rounded-border-gradient($width: 6rem, $height: 6rem, $border-radius: 50%, $border-width: .6rem, $label-tag: '.Label') {
    position: relative;

    display: inline-block;

    #{$label-tag} {
        position: relative;
        z-index: 1;

        width: $width;
        height: $height;

        background: $color-white;
        border-radius: $border-radius;
        color: $color-green-dark;
        font-weight: 700;
        padding-top: 1.3rem;
        text-align: center;
        text-transform: uppercase;

        @include font-size(26px);
    }

    &::after {
        position: absolute;
        top: -($border-width / 2);
        left: -($border-width / 2);

        width: $width + $border-width;
        height: $height + $border-width;

        border-radius: 50%;
        content: '';

        @include simple-gradient($color-green-dark, $color-green-light, to right);
    }
}
